// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPCcore_MPCcore_Pipeline_VITIS_LOOP_42_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        Yref_V_address0,
        Yref_V_ce0,
        Yref_V_we0,
        Yref_V_d0,
        Yref_V_address1,
        Yref_V_ce1,
        Yref_V_we1,
        Yref_V_d1,
        xref_0_load,
        xref_1_load,
        xref_2_load,
        xref_3_load,
        xref_4_load,
        xref_5_load
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
output  [4:0] Yref_V_address0;
output   Yref_V_ce0;
output   Yref_V_we0;
output  [15:0] Yref_V_d0;
output  [4:0] Yref_V_address1;
output   Yref_V_ce1;
output   Yref_V_we1;
output  [15:0] Yref_V_d1;
input  [15:0] xref_0_load;
input  [15:0] xref_1_load;
input  [15:0] xref_2_load;
input  [15:0] xref_3_load;
input  [15:0] xref_4_load;
input  [15:0] xref_5_load;

reg ap_idle;
reg[4:0] Yref_V_address0;
reg Yref_V_ce0;
reg Yref_V_we0;
reg[15:0] Yref_V_d0;
reg[4:0] Yref_V_address1;
reg Yref_V_ce1;
reg Yref_V_we1;
reg[15:0] Yref_V_d1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln1073_fu_167_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [4:0] ret_V_8_fu_199_p2;
reg   [4:0] ret_V_8_reg_296;
wire   [63:0] zext_ln587_fu_205_p1;
wire   [63:0] zext_ln587_1_fu_216_p1;
wire   [63:0] zext_ln587_2_fu_231_p1;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln587_3_fu_241_p1;
wire   [63:0] zext_ln587_4_fu_251_p1;
wire   [63:0] zext_ln587_5_fu_261_p1;
reg   [1:0] rhs_V_fu_60;
wire   [1:0] add_ln886_fu_173_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_V;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [2:0] shl_ln1540_1_fu_187_p3;
wire   [4:0] shl_ln_fu_179_p3;
wire   [4:0] zext_ln1540_fu_195_p1;
wire   [4:0] ret_V_fu_210_p2;
wire   [4:0] ret_V_4_fu_226_p2;
wire   [4:0] ret_V_5_fu_236_p2;
wire   [4:0] ret_V_6_fu_246_p2;
wire   [4:0] ret_V_7_fu_256_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_start_int;
reg    ap_condition_197;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_done_reg = 1'b0;
end

MPCcore_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        if ((1'b1 == ap_ce)) begin
            ap_CS_fsm <= ap_NS_fsm;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b0 == ap_ce) | (ap_start_int == 1'b0)) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_197)) begin
        if ((icmp_ln1073_fu_167_p2 == 1'd0)) begin
            rhs_V_fu_60 <= add_ln886_fu_173_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            rhs_V_fu_60 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1073_fu_167_p2 == 1'd0) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ret_V_8_reg_296[4 : 1] <= ret_V_8_fu_199_p2[4 : 1];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Yref_V_address0 = zext_ln587_5_fu_261_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Yref_V_address0 = zext_ln587_3_fu_241_p1;
    end else if (((icmp_ln1073_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        Yref_V_address0 = zext_ln587_1_fu_216_p1;
    end else begin
        Yref_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Yref_V_address1 = zext_ln587_4_fu_251_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Yref_V_address1 = zext_ln587_2_fu_231_p1;
    end else if (((icmp_ln1073_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        Yref_V_address1 = zext_ln587_fu_205_p1;
    end else begin
        Yref_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | ((icmp_ln1073_fu_167_p2 == 1'd0) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)))) begin
        Yref_V_ce0 = 1'b1;
    end else begin
        Yref_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | ((icmp_ln1073_fu_167_p2 == 1'd0) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)))) begin
        Yref_V_ce1 = 1'b1;
    end else begin
        Yref_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Yref_V_d0 = xref_5_load;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Yref_V_d0 = xref_3_load;
    end else if (((icmp_ln1073_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        Yref_V_d0 = xref_1_load;
    end else begin
        Yref_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Yref_V_d1 = xref_4_load;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Yref_V_d1 = xref_2_load;
    end else if (((icmp_ln1073_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        Yref_V_d1 = xref_0_load;
    end else begin
        Yref_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | ((icmp_ln1073_fu_167_p2 == 1'd0) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)))) begin
        Yref_V_we0 = 1'b1;
    end else begin
        Yref_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | ((icmp_ln1073_fu_167_p2 == 1'd0) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)))) begin
        Yref_V_we1 = 1'b1;
    end else begin
        Yref_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_ce) | (ap_start_int == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_ce) | (ap_start_int == 1'b0)) & (icmp_ln1073_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_ce) | (ap_start_int == 1'b0)) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_V = 2'd0;
    end else begin
        ap_sig_allocacmp_i_V = rhs_V_fu_60;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln1073_fu_167_p2 == 1'd1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln886_fu_173_p2 = (ap_sig_allocacmp_i_V + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_197 = ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln1073_fu_167_p2 = ((ap_sig_allocacmp_i_V == 2'd3) ? 1'b1 : 1'b0);

assign ret_V_4_fu_226_p2 = (ret_V_8_reg_296 + 5'd2);

assign ret_V_5_fu_236_p2 = (ret_V_8_reg_296 + 5'd3);

assign ret_V_6_fu_246_p2 = (ret_V_8_reg_296 + 5'd4);

assign ret_V_7_fu_256_p2 = (ret_V_8_reg_296 + 5'd5);

assign ret_V_8_fu_199_p2 = (shl_ln_fu_179_p3 - zext_ln1540_fu_195_p1);

assign ret_V_fu_210_p2 = (ret_V_8_fu_199_p2 | 5'd1);

assign shl_ln1540_1_fu_187_p3 = {{ap_sig_allocacmp_i_V}, {1'd0}};

assign shl_ln_fu_179_p3 = {{ap_sig_allocacmp_i_V}, {3'd0}};

assign zext_ln1540_fu_195_p1 = shl_ln1540_1_fu_187_p3;

assign zext_ln587_1_fu_216_p1 = ret_V_fu_210_p2;

assign zext_ln587_2_fu_231_p1 = ret_V_4_fu_226_p2;

assign zext_ln587_3_fu_241_p1 = ret_V_5_fu_236_p2;

assign zext_ln587_4_fu_251_p1 = ret_V_6_fu_246_p2;

assign zext_ln587_5_fu_261_p1 = ret_V_7_fu_256_p2;

assign zext_ln587_fu_205_p1 = ret_V_8_fu_199_p2;

always @ (posedge ap_clk) begin
    ret_V_8_reg_296[0] <= 1'b0;
end

endmodule //MPCcore_MPCcore_Pipeline_VITIS_LOOP_42_3

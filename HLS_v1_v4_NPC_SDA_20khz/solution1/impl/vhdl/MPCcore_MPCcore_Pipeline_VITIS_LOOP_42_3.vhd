-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPCcore_MPCcore_Pipeline_VITIS_LOOP_42_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    Yref_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    Yref_V_ce0 : OUT STD_LOGIC;
    Yref_V_we0 : OUT STD_LOGIC;
    Yref_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Yref_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    Yref_V_ce1 : OUT STD_LOGIC;
    Yref_V_we1 : OUT STD_LOGIC;
    Yref_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xref_0_load : IN STD_LOGIC_VECTOR (15 downto 0);
    xref_1_load : IN STD_LOGIC_VECTOR (15 downto 0);
    xref_2_load : IN STD_LOGIC_VECTOR (15 downto 0);
    xref_3_load : IN STD_LOGIC_VECTOR (15 downto 0);
    xref_4_load : IN STD_LOGIC_VECTOR (15 downto 0);
    xref_5_load : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of MPCcore_MPCcore_Pipeline_VITIS_LOOP_42_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln1073_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ret_V_8_fu_199_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_8_reg_296 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln587_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_1_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_2_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln587_3_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_4_fu_251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_5_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_V_fu_60 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln886_fu_173_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_V : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal shl_ln1540_1_fu_187_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_179_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1540_fu_195_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_fu_210_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_4_fu_226_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_5_fu_236_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_6_fu_246_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_7_fu_256_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_197 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component MPCcore_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component MPCcore_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                if ((ap_const_logic_1 = ap_ce)) then 
                    ap_CS_fsm <= ap_NS_fsm;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = ap_ce) or (ap_start_int = ap_const_logic_0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    rhs_V_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_197)) then
                if ((icmp_ln1073_fu_167_p2 = ap_const_lv1_0)) then 
                    rhs_V_fu_60 <= add_ln886_fu_173_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    rhs_V_fu_60 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                    ret_V_8_reg_296(4 downto 1) <= ret_V_8_fu_199_p2(4 downto 1);
            end if;
        end if;
    end process;
    ret_V_8_reg_296(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_ce, icmp_ln1073_fu_167_p2, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln1073_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    Yref_V_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_167_p2, ap_CS_fsm_state3, zext_ln587_1_fu_216_p1, ap_CS_fsm_state2, zext_ln587_3_fu_241_p1, zext_ln587_5_fu_261_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Yref_V_address0 <= zext_ln587_5_fu_261_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Yref_V_address0 <= zext_ln587_3_fu_241_p1(5 - 1 downto 0);
        elsif (((icmp_ln1073_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Yref_V_address0 <= zext_ln587_1_fu_216_p1(5 - 1 downto 0);
        else 
            Yref_V_address0 <= "XXXXX";
        end if; 
    end process;


    Yref_V_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_167_p2, ap_CS_fsm_state3, zext_ln587_fu_205_p1, zext_ln587_2_fu_231_p1, ap_CS_fsm_state2, zext_ln587_4_fu_251_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Yref_V_address1 <= zext_ln587_4_fu_251_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Yref_V_address1 <= zext_ln587_2_fu_231_p1(5 - 1 downto 0);
        elsif (((icmp_ln1073_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Yref_V_address1 <= zext_ln587_fu_205_p1(5 - 1 downto 0);
        else 
            Yref_V_address1 <= "XXXXX";
        end if; 
    end process;


    Yref_V_ce0_assign_proc : process(ap_CS_fsm_state1, ap_ce, icmp_ln1073_fu_167_p2, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_start_int)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((icmp_ln1073_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)))) then 
            Yref_V_ce0 <= ap_const_logic_1;
        else 
            Yref_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Yref_V_ce1_assign_proc : process(ap_CS_fsm_state1, ap_ce, icmp_ln1073_fu_167_p2, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_start_int)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((icmp_ln1073_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)))) then 
            Yref_V_ce1 <= ap_const_logic_1;
        else 
            Yref_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Yref_V_d0_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_167_p2, ap_CS_fsm_state3, xref_1_load, xref_3_load, xref_5_load, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Yref_V_d0 <= xref_5_load;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Yref_V_d0 <= xref_3_load;
        elsif (((icmp_ln1073_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Yref_V_d0 <= xref_1_load;
        else 
            Yref_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Yref_V_d1_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_167_p2, ap_CS_fsm_state3, xref_0_load, xref_2_load, xref_4_load, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Yref_V_d1 <= xref_4_load;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Yref_V_d1 <= xref_2_load;
        elsif (((icmp_ln1073_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Yref_V_d1 <= xref_0_load;
        else 
            Yref_V_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Yref_V_we0_assign_proc : process(ap_CS_fsm_state1, ap_ce, icmp_ln1073_fu_167_p2, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_start_int)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((icmp_ln1073_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)))) then 
            Yref_V_we0 <= ap_const_logic_1;
        else 
            Yref_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Yref_V_we1_assign_proc : process(ap_CS_fsm_state1, ap_ce, icmp_ln1073_fu_167_p2, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_start_int)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((icmp_ln1073_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)))) then 
            Yref_V_we1 <= ap_const_logic_1;
        else 
            Yref_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln886_fu_173_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_V) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_ce, ap_start_int)
    begin
        if (((ap_const_logic_0 = ap_ce) or (ap_start_int = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_197_assign_proc : process(ap_CS_fsm_state1, ap_ce, ap_start_int)
    begin
                ap_condition_197 <= ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_ce, icmp_ln1073_fu_167_p2, ap_start_int)
    begin
        if ((not(((ap_const_logic_0 = ap_ce) or (ap_start_int = ap_const_logic_0))) and (icmp_ln1073_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_ce, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_const_logic_0 = ap_ce) or (ap_start_int = ap_const_logic_0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_ce, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_V_assign_proc : process(ap_CS_fsm_state1, rhs_V_fu_60, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_V <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_V <= rhs_V_fu_60;
        end if; 
    end process;

    icmp_ln1073_fu_167_p2 <= "1" when (ap_sig_allocacmp_i_V = ap_const_lv2_3) else "0";
    ret_V_4_fu_226_p2 <= std_logic_vector(unsigned(ret_V_8_reg_296) + unsigned(ap_const_lv5_2));
    ret_V_5_fu_236_p2 <= std_logic_vector(unsigned(ret_V_8_reg_296) + unsigned(ap_const_lv5_3));
    ret_V_6_fu_246_p2 <= std_logic_vector(unsigned(ret_V_8_reg_296) + unsigned(ap_const_lv5_4));
    ret_V_7_fu_256_p2 <= std_logic_vector(unsigned(ret_V_8_reg_296) + unsigned(ap_const_lv5_5));
    ret_V_8_fu_199_p2 <= std_logic_vector(unsigned(shl_ln_fu_179_p3) - unsigned(zext_ln1540_fu_195_p1));
    ret_V_fu_210_p2 <= (ret_V_8_fu_199_p2 or ap_const_lv5_1);
    shl_ln1540_1_fu_187_p3 <= (ap_sig_allocacmp_i_V & ap_const_lv1_0);
    shl_ln_fu_179_p3 <= (ap_sig_allocacmp_i_V & ap_const_lv3_0);
    zext_ln1540_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1540_1_fu_187_p3),5));
    zext_ln587_1_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_210_p2),64));
    zext_ln587_2_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_4_fu_226_p2),64));
    zext_ln587_3_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_5_fu_236_p2),64));
    zext_ln587_4_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_6_fu_246_p2),64));
    zext_ln587_5_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_7_fu_256_p2),64));
    zext_ln587_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_8_fu_199_p2),64));
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPCcore_ThreadPE_Pipeline_TFLOOP3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    write_flag84_0 : IN STD_LOGIC_VECTOR (0 downto 0);
    empty : IN STD_LOGIC_VECTOR (31 downto 0);
    branch_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    index_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    helpedList_0_i : IN STD_LOGIC_VECTOR (7 downto 0);
    helpedList_0_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    helpedList_0_o_ap_vld : OUT STD_LOGIC;
    helpedList_1_i : IN STD_LOGIC_VECTOR (7 downto 0);
    helpedList_1_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    helpedList_1_o_ap_vld : OUT STD_LOGIC;
    helpedList_2_i : IN STD_LOGIC_VECTOR (7 downto 0);
    helpedList_2_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    helpedList_2_o_ap_vld : OUT STD_LOGIC;
    helpedList_3_i : IN STD_LOGIC_VECTOR (7 downto 0);
    helpedList_3_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    helpedList_3_o_ap_vld : OUT STD_LOGIC;
    assignmentbegintemp_V : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read29 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read30 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read32 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read33 : IN STD_LOGIC_VECTOR (31 downto 0);
    location_0_i : IN STD_LOGIC_VECTOR (7 downto 0);
    location_0_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    location_0_o_ap_vld : OUT STD_LOGIC;
    location_1_i : IN STD_LOGIC_VECTOR (7 downto 0);
    location_1_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    location_1_o_ap_vld : OUT STD_LOGIC;
    location_2_i : IN STD_LOGIC_VECTOR (7 downto 0);
    location_2_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    location_2_o_ap_vld : OUT STD_LOGIC;
    location_3_i : IN STD_LOGIC_VECTOR (7 downto 0);
    location_3_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    location_3_o_ap_vld : OUT STD_LOGIC;
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read22 : IN STD_LOGIC_VECTOR (15 downto 0);
    xn_current_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xn_current_0_ap_vld : OUT STD_LOGIC;
    p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read23 : IN STD_LOGIC_VECTOR (15 downto 0);
    xn_current_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xn_current_1_ap_vld : OUT STD_LOGIC;
    p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read18 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read24 : IN STD_LOGIC_VECTOR (15 downto 0);
    xn_current_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xn_current_2_ap_vld : OUT STD_LOGIC;
    p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read19 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (15 downto 0);
    xn_current_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xn_current_3_ap_vld : OUT STD_LOGIC;
    p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read20 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read26 : IN STD_LOGIC_VECTOR (15 downto 0);
    xn_current_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xn_current_4_ap_vld : OUT STD_LOGIC;
    p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read21 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read27 : IN STD_LOGIC_VECTOR (15 downto 0);
    xn_current_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xn_current_5_ap_vld : OUT STD_LOGIC;
    write_flag84_1_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    write_flag84_1_out_ap_vld : OUT STD_LOGIC;
    J_current_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    J_current_1_out_ap_vld : OUT STD_LOGIC;
    lhs_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    lhs_out_ap_vld : OUT STD_LOGIC;
    index_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    index_1_out_ap_vld : OUT STD_LOGIC;
    rhs_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    rhs_out_ap_vld : OUT STD_LOGIC;
    trunc_ln6_out : OUT STD_LOGIC_VECTOR (1 downto 0);
    trunc_ln6_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of MPCcore_ThreadPE_Pipeline_TFLOOP3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal and_ln51_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal write_flag84_1_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal and_ln51_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln75_fu_671_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_reg_954 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal index_1_fu_160 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_fu_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_169_fu_753_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_lhs_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal J_current_1_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln859_fu_665_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln69_fu_647_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_170_fu_677_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_171_fu_688_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_172_fu_699_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_173_fu_710_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_174_fu_721_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_175_fu_732_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_fu_605_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln232_fu_601_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln232_1_fu_620_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln232_fu_601_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_fu_624_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln1077_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1081_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_655_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_144 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component MPCcore_mux_48_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MPCcore_mux_48_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPCcore_mux_48_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component MPCcore_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_48_8_1_1_U1061 : component MPCcore_mux_48_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => helpedList_0_i,
        din1 => helpedList_1_i,
        din2 => helpedList_2_i,
        din3 => helpedList_3_i,
        din4 => index_1_fu_160,
        dout => rhs_fu_605_p6);

    mux_48_32_1_1_U1062 : component MPCcore_mux_48_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        din0 => p_read29,
        din1 => p_read30,
        din2 => p_read32,
        din3 => p_read33,
        din4 => index_1_fu_160,
        dout => tmp_s_fu_655_p6);

    mux_48_16_1_1_U1063 : component MPCcore_mux_48_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_read3,
        din1 => p_read10,
        din2 => p_read16,
        din3 => p_read22,
        din4 => add_ln75_fu_671_p2,
        dout => tmp_170_fu_677_p6);

    mux_48_16_1_1_U1064 : component MPCcore_mux_48_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_read5,
        din1 => p_read11,
        din2 => p_read17,
        din3 => p_read23,
        din4 => add_ln75_fu_671_p2,
        dout => tmp_171_fu_688_p6);

    mux_48_16_1_1_U1065 : component MPCcore_mux_48_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_read6,
        din1 => p_read12,
        din2 => p_read18,
        din3 => p_read24,
        din4 => add_ln75_fu_671_p2,
        dout => tmp_172_fu_699_p6);

    mux_48_16_1_1_U1066 : component MPCcore_mux_48_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_read7,
        din1 => p_read13,
        din2 => p_read19,
        din3 => p_read25,
        din4 => add_ln75_fu_671_p2,
        dout => tmp_173_fu_710_p6);

    mux_48_16_1_1_U1067 : component MPCcore_mux_48_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_read8,
        din1 => p_read14,
        din2 => p_read20,
        din3 => p_read26,
        din4 => add_ln75_fu_671_p2,
        dout => tmp_174_fu_721_p6);

    mux_48_16_1_1_U1068 : component MPCcore_mux_48_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_read9,
        din1 => p_read15,
        din2 => p_read21,
        din3 => p_read27,
        din4 => add_ln75_fu_671_p2,
        dout => tmp_175_fu_732_p6);

    mux_48_8_1_1_U1069 : component MPCcore_mux_48_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => location_0_i,
        din1 => location_1_i,
        din2 => location_2_i,
        din3 => location_3_i,
        din4 => add_ln75_reg_954,
        dout => tmp_169_fu_753_p6);

    flow_control_loop_pipe_sequential_init_U : component MPCcore_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                if ((ap_const_logic_1 = ap_ce)) then 
                    ap_CS_fsm <= ap_NS_fsm;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    J_current_1_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_144)) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    J_current_1_fu_168 <= empty;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2))) then 
                    J_current_1_fu_168 <= sub_ln859_fu_665_p2;
                end if;
            end if; 
        end if;
    end process;

    index_1_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_144)) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    index_1_fu_160 <= index_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2))) then 
                    index_1_fu_160 <= add_ln75_fu_671_p2;
                end if;
            end if; 
        end if;
    end process;

    lhs_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    lhs_fu_164 <= branch_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_reg_947))) then 
                    lhs_fu_164 <= tmp_169_fu_753_p6;
                end if;
            end if; 
        end if;
    end process;

    write_flag84_1_reg_566_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag84_1_reg_566 <= write_flag84_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_reg_947) and (ap_const_logic_1 = ap_ce))) then 
                write_flag84_1_reg_566 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln75_reg_954 <= add_ln75_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln51_reg_947 <= and_ln51_fu_641_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    J_current_1_out <= J_current_1_fu_168;

    J_current_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln51_fu_641_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            J_current_1_out_ap_vld <= ap_const_logic_1;
        else 
            J_current_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln75_fu_671_p2 <= std_logic_vector(unsigned(index_1_fu_160) + unsigned(ap_const_lv8_FF));
    and_ln51_fu_641_p2 <= (icmp_ln1081_fu_636_p2 and icmp_ln1077_fu_630_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_144_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
                ap_condition_144 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, and_ln51_fu_641_p2)
    begin
        if (((ap_const_lv1_0 = and_ln51_fu_641_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_lhs_1_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln51_reg_947, ap_block_pp0_stage0, lhs_fu_164, tmp_169_fu_753_p6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_reg_947))) then 
            ap_sig_allocacmp_lhs_1 <= tmp_169_fu_753_p6;
        else 
            ap_sig_allocacmp_lhs_1 <= lhs_fu_164;
        end if; 
    end process;


    helpedList_0_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, helpedList_0_i, ap_block_pp0_stage0_01001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            helpedList_0_o <= ap_const_lv8_0;
        else 
            helpedList_0_o <= helpedList_0_i;
        end if; 
    end process;


    helpedList_0_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            helpedList_0_o_ap_vld <= ap_const_logic_1;
        else 
            helpedList_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    helpedList_1_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, helpedList_1_i, ap_block_pp0_stage0_01001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            helpedList_1_o <= ap_const_lv8_0;
        else 
            helpedList_1_o <= helpedList_1_i;
        end if; 
    end process;


    helpedList_1_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            helpedList_1_o_ap_vld <= ap_const_logic_1;
        else 
            helpedList_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    helpedList_2_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, helpedList_2_i, ap_block_pp0_stage0_01001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            helpedList_2_o <= ap_const_lv8_0;
        else 
            helpedList_2_o <= helpedList_2_i;
        end if; 
    end process;


    helpedList_2_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            helpedList_2_o_ap_vld <= ap_const_logic_1;
        else 
            helpedList_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    helpedList_3_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, helpedList_3_i, ap_block_pp0_stage0_01001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            helpedList_3_o <= ap_const_lv8_0;
        else 
            helpedList_3_o <= helpedList_3_i;
        end if; 
    end process;


    helpedList_3_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            helpedList_3_o_ap_vld <= ap_const_logic_1;
        else 
            helpedList_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1077_fu_630_p2 <= "1" when (signed(ret_V_fu_624_p2) > signed(ap_const_lv9_19)) else "0";
    icmp_ln1081_fu_636_p2 <= "1" when (signed(index_1_fu_160) > signed(assignmentbegintemp_V)) else "0";
    index_1_out <= index_1_fu_160;

    index_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln51_fu_641_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            index_1_out_ap_vld <= ap_const_logic_1;
        else 
            index_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lhs_out <= lhs_fu_164;

    lhs_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln51_fu_641_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lhs_out_ap_vld <= ap_const_logic_1;
        else 
            lhs_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    location_0_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, location_0_i, ap_block_pp0_stage0_01001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            location_0_o <= ap_const_lv8_0;
        else 
            location_0_o <= location_0_i;
        end if; 
    end process;


    location_0_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            location_0_o_ap_vld <= ap_const_logic_1;
        else 
            location_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    location_1_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, location_1_i, ap_block_pp0_stage0_01001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            location_1_o <= ap_const_lv8_0;
        else 
            location_1_o <= location_1_i;
        end if; 
    end process;


    location_1_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            location_1_o_ap_vld <= ap_const_logic_1;
        else 
            location_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    location_2_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, location_2_i, ap_block_pp0_stage0_01001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            location_2_o <= ap_const_lv8_0;
        else 
            location_2_o <= location_2_i;
        end if; 
    end process;


    location_2_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            location_2_o_ap_vld <= ap_const_logic_1;
        else 
            location_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    location_3_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, location_3_i, ap_block_pp0_stage0_01001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            location_3_o <= ap_const_lv8_0;
        else 
            location_3_o <= location_3_i;
        end if; 
    end process;


    location_3_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001, trunc_ln69_fu_647_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln69_fu_647_p1 = ap_const_lv2_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            location_3_o_ap_vld <= ap_const_logic_1;
        else 
            location_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_624_p2 <= std_logic_vector(signed(sext_ln232_1_fu_620_p1) + signed(sext_ln232_fu_601_p1));
    rhs_out <= rhs_fu_605_p6;

    rhs_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln51_fu_641_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rhs_out_ap_vld <= ap_const_logic_1;
        else 
            rhs_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln232_1_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_fu_605_p6),9));

    sext_ln232_fu_601_p0 <= ap_sig_allocacmp_lhs_1;
        sext_ln232_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln232_fu_601_p0),9));

    sub_ln859_fu_665_p2 <= std_logic_vector(unsigned(J_current_1_fu_168) - unsigned(tmp_s_fu_655_p6));
    trunc_ln69_fu_647_p1 <= index_1_fu_160(2 - 1 downto 0);
    trunc_ln6_out <= index_1_fu_160(2 - 1 downto 0);

    trunc_ln6_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln51_fu_641_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            trunc_ln6_out_ap_vld <= ap_const_logic_1;
        else 
            trunc_ln6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    write_flag84_1_out <= write_flag84_1_reg_566;

    write_flag84_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln51_fu_641_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            write_flag84_1_out_ap_vld <= ap_const_logic_1;
        else 
            write_flag84_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xn_current_0 <= tmp_170_fu_677_p6;

    xn_current_0_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xn_current_0_ap_vld <= ap_const_logic_1;
        else 
            xn_current_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xn_current_1 <= tmp_171_fu_688_p6;

    xn_current_1_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xn_current_1_ap_vld <= ap_const_logic_1;
        else 
            xn_current_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xn_current_2 <= tmp_172_fu_699_p6;

    xn_current_2_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xn_current_2_ap_vld <= ap_const_logic_1;
        else 
            xn_current_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xn_current_3 <= tmp_173_fu_710_p6;

    xn_current_3_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xn_current_3_ap_vld <= ap_const_logic_1;
        else 
            xn_current_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xn_current_4 <= tmp_174_fu_721_p6;

    xn_current_4_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xn_current_4_ap_vld <= ap_const_logic_1;
        else 
            xn_current_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xn_current_5 <= tmp_175_fu_732_p6;

    xn_current_5_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln51_fu_641_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln51_fu_641_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xn_current_5_ap_vld <= ap_const_logic_1;
        else 
            xn_current_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;

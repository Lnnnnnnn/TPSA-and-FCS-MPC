-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPCcore_ThreadPE_Pipeline_TFLOOP2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    location_3_load : IN STD_LOGIC_VECTOR (7 downto 0);
    location_2_load : IN STD_LOGIC_VECTOR (7 downto 0);
    location_1_load : IN STD_LOGIC_VECTOR (7 downto 0);
    location_0_load : IN STD_LOGIC_VECTOR (7 downto 0);
    rhs_V : IN STD_LOGIC_VECTOR (7 downto 0);
    helpedList_2_load : IN STD_LOGIC_VECTOR (7 downto 0);
    helpedList_1_load : IN STD_LOGIC_VECTOR (7 downto 0);
    helpedList_0_load : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read82 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read28 : IN STD_LOGIC_VECTOR (31 downto 0);
    assignmentbegintemp_V : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read29 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read30 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read32 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read33 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read22 : IN STD_LOGIC_VECTOR (15 downto 0);
    xn_current_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xn_current_0_ap_vld : OUT STD_LOGIC;
    p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read23 : IN STD_LOGIC_VECTOR (15 downto 0);
    xn_current_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xn_current_1_ap_vld : OUT STD_LOGIC;
    p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read18 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read24 : IN STD_LOGIC_VECTOR (15 downto 0);
    xn_current_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xn_current_2_ap_vld : OUT STD_LOGIC;
    p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read19 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (15 downto 0);
    xn_current_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xn_current_3_ap_vld : OUT STD_LOGIC;
    p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read20 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read26 : IN STD_LOGIC_VECTOR (15 downto 0);
    xn_current_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xn_current_4_ap_vld : OUT STD_LOGIC;
    p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read21 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read27 : IN STD_LOGIC_VECTOR (15 downto 0);
    xn_current_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xn_current_5_ap_vld : OUT STD_LOGIC;
    location_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    location_0_ap_vld : OUT STD_LOGIC;
    helpedList_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    helpedList_0_ap_vld : OUT STD_LOGIC;
    location_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    location_1_ap_vld : OUT STD_LOGIC;
    helpedList_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    helpedList_1_ap_vld : OUT STD_LOGIC;
    location_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    location_2_ap_vld : OUT STD_LOGIC;
    helpedList_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    helpedList_2_ap_vld : OUT STD_LOGIC;
    location_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    location_3_ap_vld : OUT STD_LOGIC;
    helpedList_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    helpedList_3_ap_vld : OUT STD_LOGIC;
    index_3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    index_3_out_ap_vld : OUT STD_LOGIC;
    mux_case_38844_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    mux_case_38844_out_ap_vld : OUT STD_LOGIC;
    mux_case_28742_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    mux_case_28742_out_ap_vld : OUT STD_LOGIC;
    mux_case_18640_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    mux_case_18640_out_ap_vld : OUT STD_LOGIC;
    mux_case_08538_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    mux_case_08538_out_ap_vld : OUT STD_LOGIC;
    lhs_V_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    lhs_V_out_ap_vld : OUT STD_LOGIC;
    p_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out_ap_vld : OUT STD_LOGIC;
    rhs_V_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    rhs_V_2_out_ap_vld : OUT STD_LOGIC;
    trunc_ln7_out : OUT STD_LOGIC_VECTOR (1 downto 0);
    trunc_ln7_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of MPCcore_ThreadPE_Pipeline_TFLOOP2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal and_ln153_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln75_fu_804_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_reg_1169 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln859_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal lhs_V_fu_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_176_fu_898_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_lhs_V_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_3_fu_180 : STD_LOGIC_VECTOR (7 downto 0);
    signal mux_case_077_fu_184 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln166_fu_740_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mux_case_178_fu_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal mux_case_279_fu_192 : STD_LOGIC_VECTOR (7 downto 0);
    signal mux_case_380_fu_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal mux_case_08538_fu_200 : STD_LOGIC_VECTOR (7 downto 0);
    signal mux_case_18640_fu_204 : STD_LOGIC_VECTOR (7 downto 0);
    signal mux_case_28742_fu_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal mux_case_38844_fu_212 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_177_fu_810_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_178_fu_821_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_179_fu_832_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_180_fu_843_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_181_fu_854_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_182_fu_865_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_1_fu_698_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln232_fu_694_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln232_2_fu_713_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln232_fu_694_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_fu_717_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln1077_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1081_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_788_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_146 : BOOLEAN;
    signal ap_condition_479 : BOOLEAN;
    signal ap_condition_483 : BOOLEAN;
    signal ap_condition_487 : BOOLEAN;
    signal ap_condition_491 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component MPCcore_mux_48_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MPCcore_mux_48_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPCcore_mux_48_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component MPCcore_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_48_8_1_1_U1197 : component MPCcore_mux_48_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => mux_case_077_fu_184,
        din1 => mux_case_178_fu_188,
        din2 => mux_case_279_fu_192,
        din3 => mux_case_380_fu_196,
        din4 => index_3_fu_180,
        dout => rhs_V_1_fu_698_p6);

    mux_48_32_1_1_U1198 : component MPCcore_mux_48_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        din0 => p_read29,
        din1 => p_read30,
        din2 => p_read32,
        din3 => p_read33,
        din4 => index_3_fu_180,
        dout => tmp_s_fu_788_p6);

    mux_48_16_1_1_U1199 : component MPCcore_mux_48_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_read3,
        din1 => p_read10,
        din2 => p_read16,
        din3 => p_read22,
        din4 => add_ln75_fu_804_p2,
        dout => tmp_177_fu_810_p6);

    mux_48_16_1_1_U1200 : component MPCcore_mux_48_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_read5,
        din1 => p_read11,
        din2 => p_read17,
        din3 => p_read23,
        din4 => add_ln75_fu_804_p2,
        dout => tmp_178_fu_821_p6);

    mux_48_16_1_1_U1201 : component MPCcore_mux_48_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_read6,
        din1 => p_read12,
        din2 => p_read18,
        din3 => p_read24,
        din4 => add_ln75_fu_804_p2,
        dout => tmp_179_fu_832_p6);

    mux_48_16_1_1_U1202 : component MPCcore_mux_48_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_read7,
        din1 => p_read13,
        din2 => p_read19,
        din3 => p_read25,
        din4 => add_ln75_fu_804_p2,
        dout => tmp_180_fu_843_p6);

    mux_48_16_1_1_U1203 : component MPCcore_mux_48_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_read8,
        din1 => p_read14,
        din2 => p_read20,
        din3 => p_read26,
        din4 => add_ln75_fu_804_p2,
        dout => tmp_181_fu_854_p6);

    mux_48_16_1_1_U1204 : component MPCcore_mux_48_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_read9,
        din1 => p_read15,
        din2 => p_read21,
        din3 => p_read27,
        din4 => add_ln75_fu_804_p2,
        dout => tmp_182_fu_865_p6);

    mux_48_8_1_1_U1205 : component MPCcore_mux_48_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => mux_case_08538_fu_200,
        din1 => mux_case_18640_fu_204,
        din2 => mux_case_28742_fu_208,
        din3 => mux_case_38844_fu_212,
        din4 => add_ln75_reg_1169,
        dout => tmp_176_fu_898_p6);

    flow_control_loop_pipe_sequential_init_U : component MPCcore_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                if ((ap_const_logic_1 = ap_ce)) then 
                    ap_CS_fsm <= ap_NS_fsm;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_146)) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_fu_172 <= p_read28;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2))) then 
                    empty_fu_172 <= sub_ln859_fu_798_p2;
                end if;
            end if; 
        end if;
    end process;

    index_3_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_146)) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    index_3_fu_180 <= ap_const_lv8_3;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2))) then 
                    index_3_fu_180 <= add_ln75_fu_804_p2;
                end if;
            end if; 
        end if;
    end process;

    lhs_V_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    lhs_V_fu_176 <= p_read82;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    lhs_V_fu_176 <= tmp_176_fu_898_p6;
                end if;
            end if; 
        end if;
    end process;

    mux_case_077_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_146)) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    mux_case_077_fu_184 <= helpedList_0_load;
                elsif ((ap_const_boolean_1 = ap_condition_479)) then 
                    mux_case_077_fu_184 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    mux_case_08538_fu_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_146)) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    mux_case_08538_fu_200 <= location_0_load;
                elsif ((ap_const_boolean_1 = ap_condition_479)) then 
                    mux_case_08538_fu_200 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    mux_case_178_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_146)) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    mux_case_178_fu_188 <= helpedList_1_load;
                elsif ((ap_const_boolean_1 = ap_condition_483)) then 
                    mux_case_178_fu_188 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    mux_case_18640_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_146)) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    mux_case_18640_fu_204 <= location_1_load;
                elsif ((ap_const_boolean_1 = ap_condition_483)) then 
                    mux_case_18640_fu_204 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    mux_case_279_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_146)) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    mux_case_279_fu_192 <= helpedList_2_load;
                elsif ((ap_const_boolean_1 = ap_condition_487)) then 
                    mux_case_279_fu_192 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    mux_case_28742_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_146)) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    mux_case_28742_fu_208 <= location_2_load;
                elsif ((ap_const_boolean_1 = ap_condition_487)) then 
                    mux_case_28742_fu_208 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    mux_case_380_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_146)) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    mux_case_380_fu_196 <= rhs_V;
                elsif ((ap_const_boolean_1 = ap_condition_491)) then 
                    mux_case_380_fu_196 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    mux_case_38844_fu_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_146)) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    mux_case_38844_fu_212 <= location_3_load;
                elsif ((ap_const_boolean_1 = ap_condition_491)) then 
                    mux_case_38844_fu_212 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln153_fu_734_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln75_reg_1169 <= add_ln75_fu_804_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln75_fu_804_p2 <= std_logic_vector(unsigned(index_3_fu_180) + unsigned(ap_const_lv8_FF));
    and_ln153_fu_734_p2 <= (icmp_ln1081_fu_729_p2 and icmp_ln1077_fu_723_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_146_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
                ap_condition_146 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_479_assign_proc : process(ap_enable_reg_pp0_iter1, and_ln153_fu_734_p2, trunc_ln166_fu_740_p1)
    begin
                ap_condition_479 <= ((trunc_ln166_fu_740_p1 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2));
    end process;


    ap_condition_483_assign_proc : process(ap_enable_reg_pp0_iter1, and_ln153_fu_734_p2, trunc_ln166_fu_740_p1)
    begin
                ap_condition_483 <= ((trunc_ln166_fu_740_p1 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2));
    end process;


    ap_condition_487_assign_proc : process(ap_enable_reg_pp0_iter1, and_ln153_fu_734_p2, trunc_ln166_fu_740_p1)
    begin
                ap_condition_487 <= ((trunc_ln166_fu_740_p1 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2));
    end process;


    ap_condition_491_assign_proc : process(ap_enable_reg_pp0_iter1, and_ln153_fu_734_p2, trunc_ln166_fu_740_p1)
    begin
                ap_condition_491 <= ((trunc_ln166_fu_740_p1 = ap_const_lv2_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, and_ln153_fu_734_p2)
    begin
        if (((ap_const_lv1_0 = and_ln153_fu_734_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_lhs_V_1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, lhs_V_fu_176, tmp_176_fu_898_p6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_lhs_V_1 <= tmp_176_fu_898_p6;
        else 
            ap_sig_allocacmp_lhs_V_1 <= lhs_V_fu_176;
        end if; 
    end process;

    helpedList_0 <= ap_const_lv8_0;

    helpedList_0_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001, trunc_ln166_fu_740_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln166_fu_740_p1 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            helpedList_0_ap_vld <= ap_const_logic_1;
        else 
            helpedList_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    helpedList_1 <= ap_const_lv8_0;

    helpedList_1_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001, trunc_ln166_fu_740_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln166_fu_740_p1 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            helpedList_1_ap_vld <= ap_const_logic_1;
        else 
            helpedList_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    helpedList_2 <= ap_const_lv8_0;

    helpedList_2_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001, trunc_ln166_fu_740_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln166_fu_740_p1 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            helpedList_2_ap_vld <= ap_const_logic_1;
        else 
            helpedList_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    helpedList_3 <= ap_const_lv8_0;

    helpedList_3_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001, trunc_ln166_fu_740_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln166_fu_740_p1 = ap_const_lv2_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            helpedList_3_ap_vld <= ap_const_logic_1;
        else 
            helpedList_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1077_fu_723_p2 <= "1" when (signed(ret_V_fu_717_p2) > signed(ap_const_lv9_19)) else "0";
    icmp_ln1081_fu_729_p2 <= "1" when (signed(index_3_fu_180) > signed(assignmentbegintemp_V)) else "0";
    index_3_out <= index_3_fu_180;

    index_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln153_fu_734_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            index_3_out_ap_vld <= ap_const_logic_1;
        else 
            index_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_out <= lhs_V_fu_176;

    lhs_V_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln153_fu_734_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lhs_V_out_ap_vld <= ap_const_logic_1;
        else 
            lhs_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    location_0 <= ap_const_lv8_0;

    location_0_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001, trunc_ln166_fu_740_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln166_fu_740_p1 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            location_0_ap_vld <= ap_const_logic_1;
        else 
            location_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    location_1 <= ap_const_lv8_0;

    location_1_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001, trunc_ln166_fu_740_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln166_fu_740_p1 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            location_1_ap_vld <= ap_const_logic_1;
        else 
            location_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    location_2 <= ap_const_lv8_0;

    location_2_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001, trunc_ln166_fu_740_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln166_fu_740_p1 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            location_2_ap_vld <= ap_const_logic_1;
        else 
            location_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    location_3 <= ap_const_lv8_0;

    location_3_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001, trunc_ln166_fu_740_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln166_fu_740_p1 = ap_const_lv2_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            location_3_ap_vld <= ap_const_logic_1;
        else 
            location_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_08538_out <= mux_case_08538_fu_200;

    mux_case_08538_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln153_fu_734_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mux_case_08538_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_08538_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_18640_out <= mux_case_18640_fu_204;

    mux_case_18640_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln153_fu_734_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mux_case_18640_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_18640_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_28742_out <= mux_case_28742_fu_208;

    mux_case_28742_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln153_fu_734_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mux_case_28742_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_28742_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_38844_out <= mux_case_38844_fu_212;

    mux_case_38844_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln153_fu_734_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mux_case_38844_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_38844_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out <= empty_fu_172;

    p_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln153_fu_734_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_717_p2 <= std_logic_vector(signed(sext_ln232_2_fu_713_p1) + signed(sext_ln232_fu_694_p1));
    rhs_V_2_out <= rhs_V_1_fu_698_p6;

    rhs_V_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln153_fu_734_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rhs_V_2_out_ap_vld <= ap_const_logic_1;
        else 
            rhs_V_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln232_2_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_698_p6),9));

    sext_ln232_fu_694_p0 <= ap_sig_allocacmp_lhs_V_1;
        sext_ln232_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln232_fu_694_p0),9));

    sub_ln859_fu_798_p2 <= std_logic_vector(unsigned(empty_fu_172) - unsigned(tmp_s_fu_788_p6));
    trunc_ln166_fu_740_p1 <= index_3_fu_180(2 - 1 downto 0);
    trunc_ln7_out <= index_3_fu_180(2 - 1 downto 0);

    trunc_ln7_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln153_fu_734_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            trunc_ln7_out_ap_vld <= ap_const_logic_1;
        else 
            trunc_ln7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xn_current_0 <= tmp_177_fu_810_p6;

    xn_current_0_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xn_current_0_ap_vld <= ap_const_logic_1;
        else 
            xn_current_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xn_current_1 <= tmp_178_fu_821_p6;

    xn_current_1_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xn_current_1_ap_vld <= ap_const_logic_1;
        else 
            xn_current_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xn_current_2 <= tmp_179_fu_832_p6;

    xn_current_2_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xn_current_2_ap_vld <= ap_const_logic_1;
        else 
            xn_current_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xn_current_3 <= tmp_180_fu_843_p6;

    xn_current_3_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xn_current_3_ap_vld <= ap_const_logic_1;
        else 
            xn_current_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xn_current_4 <= tmp_181_fu_854_p6;

    xn_current_4_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xn_current_4_ap_vld <= ap_const_logic_1;
        else 
            xn_current_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xn_current_5 <= tmp_182_fu_865_p6;

    xn_current_5_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, and_ln153_fu_734_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln153_fu_734_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xn_current_5_ap_vld <= ap_const_logic_1;
        else 
            xn_current_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
